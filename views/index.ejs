<style>
    /* General Styling */
    body {
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #1a1a2e;
        color: #dcdcdc;
    }

    h1,
    h2 {
        text-align: center;
        margin: 20px 0;
    }

    h1 {
        font-size: 2.5em;
        color: #cbcbcb;
    }

    h2 {
        font-size: 1.8em;
        color: #cbcbcb;
    }

    /* Container */
    .container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Logout Button */
    .logout-form {
        position: absolute;
        top: 20px;
        right: 20px;
    }

    .logout-btn {
        padding: 10px 15px;
        border: none;
        border-radius: 50px;
        background-color: #411779;
        /* Solid button color */
        color: #fff;
        font-size: 0.9em;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .logout-btn:hover {
        transform: scale(1.1);
        /* Hover scaling effect */
    }

    /* Form Styling */
    form {
        background: linear-gradient(135deg, #2a2a40, #2f1357);
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
        margin-bottom: 30px;
    }

    form label {
        font-size: 1.2em;
        margin-bottom: 10px;
        display: block;
        color: #9eb1c9;
    }

    form input {
        width: 100%;
        padding: 12px;
        margin: 15px 0;
        border: none;
        border-radius: 8px;
        background-color: #2e4057;
        color: #dcdcdc;
        font-size: 1em;
    }

    form button {
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 8px;
        background: linear-gradient(90deg, #1fa2ff, #3c1e72);
        color: #fff;
        font-size: 1.1em;
        font-weight: bold;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    form button:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(31, 162, 255, 0.5);
    }

    /* Chat List */
    .chat-list {
        background: linear-gradient(135deg, #262b42, #282048);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
    }

    .chat-list ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .chat-list ul li {
        padding: 15px 20px;
        background-color: #2e4057;
        border-radius: 8px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: background-color 0.3s, transform 0.2s;
    }

    .chat-list ul li:hover {
        background-color: #3b4b69;
        transform: scale(1.02);
    }

    .chat-list ul li a {
        text-decoration: none;
        color: #fbfbfb;
        font-size: 1.1em;
    }

    .chat-list ul li a:hover {
        text-decoration: underline;
    }

    .chat-list ul li span {
        font-size: 0.9em;
        color: #a1a6c4;
    }

    /* No Chats Message */
    .no-chats {
        text-align: center;
        color: #a1a6c4;
        font-size: 1.2em;
        margin-top: 20px;
    }
</style>

<!-- Logout Button Form -->
<form class="logout-form" action="/logout" method="POST">
    <button class="logout-btn" type="submit">Logout</button>
</form>

<h1>
    <%= user.username%> Dashboard
</h1>
<div class="container">
    <!-- Create Chat Section -->
    <form id="create-chat-form" action="/create-chat" method="POST">
        <label for="username">Start a New Chat:</label>
        <input type="text" id="username" name="username" placeholder="Enter username" required>
        <button type="submit" id="create-chat-btn">Create Chat</button>
        <div id="error-message" style="color: #ff6b6b; margin-top: 10px; display: none;"></div>
    </form>

    <!-- Previous Chats Section -->
    <h2>Previous Chat Sessions</h2>
    <div class="chat-list">
        <% if (chatSessions && chatSessions.length> 0) { %>
            <ul>
                <% chatSessions.forEach(session=> { %>
                    <li>
                        <a href="/chat/<%= session._id %>">
                            Chat with <%= session.participants.find(p=> p._id.toString() !==
                                    user._id.toString()).username %>
                        </a>
                        <span>
                            <%= new Date(session.lastUpdated).toLocaleDateString() %>
                        </span>
                    </li>
                <% }); %>
            </ul>
        <% } else { %>
            <p class="no-chats">You have no previous chat sessions.</p>
        <% } %>
    </div>
</div>

<script>
document.getElementById('create-chat-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const username = document.getElementById('username').value.trim();
    const errorDiv = document.getElementById('error-message');
    const button = document.getElementById('create-chat-btn');
    
    // Clear previous error
    errorDiv.style.display = 'none';
    
    // Basic validation
    if (!username) {
        errorDiv.textContent = 'Please enter a username';
        errorDiv.style.display = 'block';
        return;
    }
    
    // Disable button during request
    button.disabled = true;
    button.textContent = 'Creating...';
    
    try {
        const response = await fetch('/create-chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `username=${encodeURIComponent(username)}`
        });
        
        if (response.ok && response.redirected) {
            // Successful redirect
            window.location.href = response.url;
        } else if (response.headers.get('Content-Type').includes('application/json')) {
            // JSON response (likely an error)
            const result = await response.json();
            errorDiv.textContent = result.message || 'An error occurred';
            errorDiv.style.display = 'block';
        } else {
            // Handle other responses
            const text = await response.text();
            window.location.href = '/dashboard'; // Fallback redirect
        }
    } catch (error) {
        errorDiv.textContent = 'Network error. Please try again.';
        errorDiv.style.display = 'block';
    } finally {
        // Re-enable button
        button.disabled = false;
        button.textContent = 'Create Chat';
    }
});
</script>
